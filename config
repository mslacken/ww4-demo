#!/usr/bin/bash
# network configuration for the demo used for:
# - static congiguration of qcow2 ww4 image
# - terraform network
function read_json() {
  jq .${1} < config.json | tr -d '"'
}
json_config=config.json
IPADDR=$(read_json IPADDR)
IPSTART=$(read_json IPSTART)
EFISTART=$(read_json EFISTART)
IPNET=$(read_json IPNET)
NETMASK=$(read_json NETMASK)
GATEWAY=$(read_json GATEWAY)
DNS=$(read_json DNS)
DEMOCONT=$(read_json DEMOCONT)
DEMOCONTSRC=$(read_json DEMOCONTSRC)
IMAGE=$(read_json IMAGE)
IMAGESRC=$(read_json IMAGESRC)
WAIT_FACTOR=$(read_json WAIT_FACTOR)
WAIT_SHORT=$(read_json WAIT_SHORT)
WAIT_SHORT=$((WAIT_SHORT * WAIT_FACTOR))
WAIT_LONG=$(read_json WAIT_LONG)
WAIT_LONG=$((WAIT_LONG * WAIT_FACTOR))

function run_on_hostq() {
  local remhost=$1
  if [ -z "$remhost" ] ; then 
    echo "`tput bold`no remote host given`tput sgr0`"
    return
  fi
  local cmd=$2
  local comment=$3
  if [ -n "$comment" ]; then 
    echo -e "`tput bold``tput smul`$comment`tput rmul``tput sgr0`"
  fi
  ssh -x -o "StrictHostKeyChecking=no" root@$remhost $cmd || exit 1
}

function run_on_host() {
  run_on_hostq "$1" "$2" "${3}`tput rmul`\n$2"
}

function wait_key() {
  time=${1:-3}
  if read -r -s -n 1 -t $time -p "`tput bold`Press 's' to get a shell or any key other to continue.`tput sgr0`" value; then
      case $value in
	  s|S) echo; bash ;;
	  *) echo; return ;;
      esac
  fi
  echo -ne "\r"
}

function show() {
  echo -e "`tput bold``tput smul`$@`tput rmul``tput sgr0`"
}
